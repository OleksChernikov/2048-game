{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar cells = document.querySelectorAll(\".field-cell\");\nvar score = document.querySelector(\".game-score\");\nvar scoreValue = score.innerText;\nvar loseMessage = document.querySelector(\".message-lose\");\nvar startMessage = document.querySelector(\".message-start\");\nvar winMessage = document.querySelector(\".message-win\");\nvar grid = [\n    [\n        null,\n        null,\n        null,\n        null\n    ],\n    [\n        null,\n        null,\n        null,\n        null\n    ],\n    [\n        null,\n        null,\n        null,\n        null\n    ],\n    [\n        null,\n        null,\n        null,\n        null\n    ]\n];\nvar mergedCells = [\n    [\n        false,\n        false,\n        false,\n        false\n    ],\n    [\n        false,\n        false,\n        false,\n        false\n    ],\n    [\n        false,\n        false,\n        false,\n        false\n    ],\n    [\n        false,\n        false,\n        false,\n        false\n    ]\n];\nvar gridSize = 4;\nfunction updateGrid() {\n    cells.forEach(function(cell, index) {\n        var x = index % gridSize;\n        var y = Math.floor(index / gridSize);\n        var value = grid[y][x];\n        cell.textContent = value !== null ? value : \"\";\n        cell.className = \"field-cell\";\n        if (value !== null) cell.classList.add(\"field-cell--\" + value);\n    });\n}\nfunction generateNumber() {\n    var emptyCells = [];\n    grid.forEach(function(row, y) {\n        row.forEach(function(value, x) {\n            if (value === null) emptyCells.push({\n                x: x,\n                y: y\n            });\n        });\n    });\n    if (emptyCells.length > 0) {\n        var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        var newValue = Math.random() < 0.9 ? 2 : 4;\n        grid[randomCell.y][randomCell.x] = newValue;\n        updateGrid();\n    }\n    scoreInfo();\n}\nfunction initGame() {\n    startMessage.classList.remove(\"hidden\");\n    loseMessage.classList.add(\"hidden\");\n    grid = [\n        [\n            null,\n            null,\n            null,\n            null\n        ],\n        [\n            null,\n            null,\n            null,\n            null\n        ],\n        [\n            null,\n            null,\n            null,\n            null\n        ],\n        [\n            null,\n            null,\n            null,\n            null\n        ]\n    ];\n    mergedCells = [\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ],\n        [\n            false,\n            false,\n            false,\n            false\n        ]\n    ];\n    generateNumber();\n    generateNumber();\n}\nfunction handleKeyPress(keyEvent) {\n    var key = keyEvent.key;\n    if (key === \"ArrowUp\") moveUp();\n    else if (key === \"ArrowDown\") moveDown();\n    else if (key === \"ArrowLeft\") moveLeft();\n    else if (key === \"ArrowRight\") moveRight();\n}\nfunction resetMergedCells() {\n    for(var y = 0; y < gridSize; y++)for(var x = 0; x < gridSize; x++)mergedCells[y][x] = false;\n}\nfunction scoreInfo() {\n    var sumBall = 0;\n    cells.forEach(function(el) {\n        sumBall += +el.innerText;\n        scoreValue = sumBall;\n    });\n    scoreValue = sumBall;\n    score.innerText = scoreValue;\n}\nfunction checkGameOver() {\n    for(var y = 0; y < gridSize; y++)for(var x = 0; x < gridSize; x++){\n        if (grid[y][x] === null) return false;\n    }\n    for(var y1 = 0; y1 < gridSize; y1++)for(var x1 = 0; x1 < gridSize - 1; x1++){\n        if (grid[y1][x1] === grid[y1][x1 + 1]) return false;\n    }\n    for(var x2 = 0; x2 < gridSize; x2++)for(var y2 = 0; y2 < gridSize - 1; y2++){\n        if (grid[y2][x2] === grid[y2 + 1][x2]) return false;\n    }\n    startMessage.classList.add(\"hidden\");\n    loseMessage.classList.remove(\"hidden\");\n    return true;\n}\nfunction checkWin() {\n    for(var y = 0; y < gridSize; y++){\n        for(var x = 0; x < gridSize; x++)if (grid[y][x] === 2048) {\n            startMessage.classList.add(\"hidden\");\n            winMessage.classList.remove(\"hidden\");\n            return true;\n        }\n    }\n}\nfunction moveUp() {\n    resetMergedCells();\n    var moved = false;\n    for(var x = 0; x < gridSize; x++){\n        for(var y = 1; y < gridSize; y++)if (grid[y][x] !== null) {\n            var value = grid[y][x];\n            var targetY = y;\n            while(targetY > 0 && grid[targetY - 1][x] === null)targetY--;\n            if (targetY > 0 && grid[targetY - 1][x] === value && !mergedCells[targetY - 1][x]) {\n                grid[targetY - 1][x] *= 2;\n                grid[y][x] = null;\n                mergedCells[targetY - 1][x] = true;\n                mergedCells[targetY][x] = false;\n                moved = true;\n            } else if (targetY !== y) {\n                grid[targetY][x] = value;\n                grid[y][x] = null;\n                moved = true;\n            }\n        }\n    }\n    if (moved) {\n        generateNumber();\n        updateGrid();\n        checkGameOver();\n        checkWin();\n    }\n}\nfunction moveDown() {\n    resetMergedCells();\n    var moved = false;\n    for(var x = 0; x < gridSize; x++){\n        for(var y = gridSize - 1; y >= 0; y--)if (grid[y][x] !== null) {\n            var value = grid[y][x];\n            var targetY = y;\n            while(targetY < gridSize - 1 && grid[targetY + 1][x] === null)targetY++;\n            if (targetY < gridSize - 1 && grid[targetY + 1][x] === value && !mergedCells[targetY + 1][x]) {\n                grid[targetY + 1][x] *= 2;\n                grid[y][x] = null;\n                mergedCells[targetY + 1][x] = true;\n                mergedCells[targetY][x] = false;\n                moved = true;\n            } else if (targetY !== y) {\n                grid[targetY][x] = value;\n                grid[y][x] = null;\n                moved = true;\n            }\n        }\n    }\n    if (moved) {\n        generateNumber();\n        updateGrid();\n        checkGameOver();\n        checkWin();\n    }\n}\nfunction moveLeft() {\n    resetMergedCells();\n    var moved = false;\n    for(var y = 0; y < gridSize; y++){\n        for(var x = 1; x < gridSize; x++)if (grid[y][x] !== null) {\n            var value = grid[y][x];\n            var targetX = x;\n            while(targetX > 0 && grid[y][targetX - 1] === null)targetX--;\n            if (targetX > 0 && grid[y][targetX - 1] === value && !mergedCells[y][targetX - 1]) {\n                grid[y][targetX - 1] *= 2;\n                grid[y][x] = null;\n                mergedCells[y][targetX - 1] = true;\n                mergedCells[y][targetX] = false;\n                moved = true;\n            } else if (targetX !== x) {\n                grid[y][targetX] = value;\n                grid[y][x] = null;\n                moved = true;\n            }\n        }\n    }\n    if (moved) {\n        generateNumber();\n        updateGrid();\n        checkGameOver();\n        checkWin();\n    }\n}\nfunction moveRight() {\n    resetMergedCells();\n    var moved = false;\n    for(var y = 0; y < gridSize; y++){\n        for(var x = gridSize - 1; x >= 0; x--)if (grid[y][x] !== null) {\n            var value = grid[y][x];\n            var targetX = x;\n            while(targetX < gridSize - 1 && grid[y][targetX + 1] === null)targetX++;\n            if (targetX < gridSize - 1 && grid[y][targetX + 1] === value && !mergedCells[y][targetX + 1]) {\n                grid[y][targetX + 1] *= 2;\n                grid[y][x] = null;\n                mergedCells[y][targetX + 1] = true;\n                mergedCells[y][targetX] = false;\n                moved = true;\n            } else if (targetX !== x) {\n                grid[y][targetX] = value;\n                grid[y][x] = null;\n                moved = true;\n            }\n        }\n    }\n    if (moved) {\n        generateNumber();\n        updateGrid();\n        checkGameOver();\n        checkWin();\n        scoreInfo();\n    }\n}\nvar startButton = document.querySelector(\".button.start\");\nstartButton.addEventListener(\"click\", function() {\n    initGame();\n    startMessage.classList.add(\"hidden\");\n    startButton.classList.remove(\"start\");\n    startButton.classList.add(\"restart\");\n    startButton.innerText = \"Restart\";\n});\ndocument.addEventListener(\"keydown\", handleKeyPress);\n\n//# sourceMappingURL=index.2b9c996f.js.map\n","'use strict';\r\n\r\nconst cells = document.querySelectorAll('.field-cell');\r\nconst score = document.querySelector('.game-score');\r\nlet scoreValue = score.innerText;\r\nconst loseMessage = document.querySelector('.message-lose');\r\nconst startMessage = document.querySelector('.message-start');\r\nconst winMessage = document.querySelector('.message-win');\r\n\r\nlet grid = [\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n  [null, null, null, null],\r\n];\r\n\r\nlet mergedCells = [\r\n  [false, false, false, false],\r\n  [false, false, false, false],\r\n  [false, false, false, false],\r\n  [false, false, false, false],\r\n];\r\n\r\nconst gridSize = 4;\r\n\r\nfunction updateGrid() {\r\n  cells.forEach(function(cell, index) {\r\n    const x = index % gridSize;\r\n    const y = Math.floor(index / gridSize);\r\n    const value = grid[y][x];\r\n\r\n    cell.textContent = value !== null ? value : '';\r\n    cell.className = 'field-cell';\r\n\r\n    if (value !== null) {\r\n      cell.classList.add('field-cell--' + value);\r\n    }\r\n  });\r\n}\r\n\r\nfunction generateNumber() {\r\n  const emptyCells = [];\r\n\r\n  grid.forEach(function(row, y) {\r\n    row.forEach(function(value, x) {\r\n      if (value === null) {\r\n        emptyCells.push({\r\n          x: x, y: y,\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  if (emptyCells.length > 0) {\r\n    const randomCell\r\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n    const newValue = Math.random() < 0.9 ? 2 : 4;\r\n\r\n    grid[randomCell.y][randomCell.x] = newValue;\r\n    updateGrid();\r\n  }\r\n  scoreInfo();\r\n}\r\n\r\nfunction initGame() {\r\n  startMessage.classList.remove('hidden');\r\n  loseMessage.classList.add('hidden');\r\n\r\n  grid = [\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n    [null, null, null, null],\r\n  ];\r\n\r\n  mergedCells = [\r\n    [false, false, false, false],\r\n    [false, false, false, false],\r\n    [false, false, false, false],\r\n    [false, false, false, false],\r\n  ];\r\n\r\n  generateNumber();\r\n  generateNumber();\r\n}\r\n\r\nfunction handleKeyPress(keyEvent) {\r\n  const key = keyEvent.key;\r\n\r\n  if (key === 'ArrowUp') {\r\n    moveUp();\r\n  } else if (key === 'ArrowDown') {\r\n    moveDown();\r\n  } else if (key === 'ArrowLeft') {\r\n    moveLeft();\r\n  } else if (key === 'ArrowRight') {\r\n    moveRight();\r\n  }\r\n}\r\n\r\nfunction resetMergedCells() {\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = 0; x < gridSize; x++) {\r\n      mergedCells[y][x] = false;\r\n    }\r\n  }\r\n}\r\n\r\nfunction scoreInfo() {\r\n  let sumBall = 0;\r\n\r\n  cells.forEach((el) => {\r\n    sumBall += +el.innerText;\r\n    scoreValue = sumBall;\r\n  });\r\n  scoreValue = sumBall;\r\n  score.innerText = scoreValue;\r\n}\r\n\r\nfunction checkGameOver() {\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = 0; x < gridSize; x++) {\r\n      if (grid[y][x] === null) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = 0; x < gridSize - 1; x++) {\r\n      if (grid[y][x] === grid[y][x + 1]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let x = 0; x < gridSize; x++) {\r\n    for (let y = 0; y < gridSize - 1; y++) {\r\n      if (grid[y][x] === grid[y + 1][x]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  startMessage.classList.add('hidden');\r\n  loseMessage.classList.remove('hidden');\r\n\r\n  return true;\r\n}\r\n\r\nfunction checkWin() {\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = 0; x < gridSize; x++) {\r\n      if (grid[y][x] === 2048) {\r\n        startMessage.classList.add('hidden');\r\n        winMessage.classList.remove('hidden');\r\n\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveUp() {\r\n  resetMergedCells();\r\n\r\n  let moved = false;\r\n\r\n  for (let x = 0; x < gridSize; x++) {\r\n    for (let y = 1; y < gridSize; y++) {\r\n      if (grid[y][x] !== null) {\r\n        const value = grid[y][x];\r\n        let targetY = y;\r\n\r\n        while (targetY > 0 && grid[targetY - 1][x] === null) {\r\n          targetY--;\r\n        }\r\n\r\n        if (targetY > 0 && grid[targetY - 1][x] === value\r\n          && !mergedCells[targetY - 1][x]) {\r\n          grid[targetY - 1][x] *= 2;\r\n          grid[y][x] = null;\r\n          mergedCells[targetY - 1][x] = true;\r\n          mergedCells[targetY][x] = false;\r\n          moved = true;\r\n        } else if (targetY !== y) {\r\n          grid[targetY][x] = value;\r\n          grid[y][x] = null;\r\n          moved = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (moved) {\r\n    generateNumber();\r\n    updateGrid();\r\n    checkGameOver();\r\n    checkWin();\r\n  }\r\n}\r\n\r\nfunction moveDown() {\r\n  resetMergedCells();\r\n\r\n  let moved = false;\r\n\r\n  for (let x = 0; x < gridSize; x++) {\r\n    for (let y = gridSize - 1; y >= 0; y--) {\r\n      if (grid[y][x] !== null) {\r\n        const value = grid[y][x];\r\n        let targetY = y;\r\n\r\n        while (targetY < gridSize - 1 && grid[targetY + 1][x] === null) {\r\n          targetY++;\r\n        }\r\n\r\n        if (targetY < gridSize - 1 && grid[targetY + 1][x] === value\r\n          && !mergedCells[targetY + 1][x]) {\r\n          grid[targetY + 1][x] *= 2;\r\n          grid[y][x] = null;\r\n          mergedCells[targetY + 1][x] = true;\r\n          mergedCells[targetY][x] = false;\r\n          moved = true;\r\n        } else if (targetY !== y) {\r\n          grid[targetY][x] = value;\r\n          grid[y][x] = null;\r\n          moved = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (moved) {\r\n    generateNumber();\r\n    updateGrid();\r\n    checkGameOver();\r\n    checkWin();\r\n  }\r\n}\r\n\r\nfunction moveLeft() {\r\n  resetMergedCells();\r\n\r\n  let moved = false;\r\n\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = 1; x < gridSize; x++) {\r\n      if (grid[y][x] !== null) {\r\n        const value = grid[y][x];\r\n        let targetX = x;\r\n\r\n        while (targetX > 0 && grid[y][targetX - 1] === null) {\r\n          targetX--;\r\n        }\r\n\r\n        if (targetX > 0 && grid[y][targetX - 1] === value\r\n          && !mergedCells[y][targetX - 1]) {\r\n          grid[y][targetX - 1] *= 2;\r\n          grid[y][x] = null;\r\n          mergedCells[y][targetX - 1] = true;\r\n          mergedCells[y][targetX] = false;\r\n          moved = true;\r\n        } else if (targetX !== x) {\r\n          grid[y][targetX] = value;\r\n          grid[y][x] = null;\r\n          moved = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (moved) {\r\n    generateNumber();\r\n    updateGrid();\r\n    checkGameOver();\r\n    checkWin();\r\n  }\r\n}\r\n\r\nfunction moveRight() {\r\n  resetMergedCells();\r\n\r\n  let moved = false;\r\n\r\n  for (let y = 0; y < gridSize; y++) {\r\n    for (let x = gridSize - 1; x >= 0; x--) {\r\n      if (grid[y][x] !== null) {\r\n        const value = grid[y][x];\r\n        let targetX = x;\r\n\r\n        while (targetX < gridSize - 1 && grid[y][targetX + 1] === null) {\r\n          targetX++;\r\n        }\r\n\r\n        if (targetX < gridSize - 1 && grid[y][targetX + 1] === value\r\n          && !mergedCells[y][targetX + 1]) {\r\n          grid[y][targetX + 1] *= 2;\r\n          grid[y][x] = null;\r\n          mergedCells[y][targetX + 1] = true;\r\n          mergedCells[y][targetX] = false;\r\n          moved = true;\r\n        } else if (targetX !== x) {\r\n          grid[y][targetX] = value;\r\n          grid[y][x] = null;\r\n          moved = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (moved) {\r\n    generateNumber();\r\n    updateGrid();\r\n    checkGameOver();\r\n    checkWin();\r\n    scoreInfo();\r\n  }\r\n}\r\n\r\nconst startButton = document.querySelector('.button.start');\r\n\r\n\r\nstartButton.addEventListener('click', function() {\r\n  initGame();\r\n  startMessage.classList.add('hidden');\r\n  startButton.classList.remove('start');\r\n  startButton.classList.add('restart');\r\n  startButton.innerText = 'Restart';\r\n});\r\n\r\ndocument.addEventListener('keydown', handleKeyPress);\r\n"],"names":["cells","document","querySelectorAll","score","querySelector","scoreValue","innerText","loseMessage","startMessage","winMessage","grid","mergedCells","updateGrid","forEach","cell","index","value","Math","floor","textContent","className","classList","add","generateNumber","emptyCells","row","y","x","push","length","randomCell","random","scoreInfo","resetMergedCells","sumBall","el","checkGameOver","y1","x1","gridSize","x2","y2","remove","checkWin","startButton","addEventListener","keyEvent","key","moveUp","moved","targetY","moveDown","moveLeft","targetX","moveRight"],"version":3,"file":"index.2b9c996f.js.map"}